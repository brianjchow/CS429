/*
	DEVELOPMENT NOTES

		MEMORY ADDRESSING
			- 12 bits to work with
			- in effect, each address consists of a 5-bit page number and a 7-bit location within a page

		MEMORY REFERENCE INSTRUCTION FORMAT

			Instruction						 Mnemonic	 Opcode	 Time (cycles)
				Logical AND						AND			0		  2
				Two's complement add			TAD			1		  2
				Increment and skip if zero		ISZ			2		  2
				Deposit and clear accumulator	DCA			3		  2
				Jump to subroutine				JMS			4		  2
				Jump							JMP			5		  1

					Bits:	11	to	9 |  8  |  7  | 	6	to	0
			 Translation:	  Opcode  | D/I | Z/C | Page address bits

	 	INTERPRETING MEMORY REFERENCE INSTRUCTIONS

	 		1) Examine Z/C bit
	 	 	 - if Z/C == 0
	 	 	 	 - the high-order five bits of the memory address are 0 (0th page)
	 	 	 - else if == 1
	 	 	 	 - the high order five bits of the memory address are the same as the high order 5 bits of the address P (current page)

	 		2) Examine D/I bit
	 	 		- if D/I == 0
	 	 	 		- the address in the instruction (the low-order 7 bits) is the effective address is the
	 	 	 	      address of the memory location wanted; NO INDIRECTION
	 	 	 	 - else if == 1
	 	 	 	 	 - the address in the instruction (the low-order 7 bits) is the address of the address of the memory location; INDIRECTION
				 	 - fetching the contents of the address in the instruction gives the effective address (the address of the memory
				  	   location wanted)

		EXAMPLE
			- given the memory reference instruction '067':
				- converts to 0000 0110 0111 in binary (spaces added for clarity)
				- == 000 0 0 1100111, so
					- opcode is 0 (000)
					- D/I bit is 0
					- Z/C bit is 0
					- page address is 1100111
				- examine Z/C bit: == 0
					- so the high-order five bits of the memory address are 0; page # is 0
				- examine D/I bit: == 0
					- so the low-order 7 bits in the instruction is the effective address of the memory location wanted
				- reference the instruction at memory location 000001100111 ("PC = 0x064")

		INTERPRETING OPERATE INSTRUCTIONS
			- these are also 12 bits in length
			- are separated into two groups, based on the value of the 8th bit:

			Group 1 (8th bit is 0)
				11    |    10    |    9    |    8    |    7    |    6    |    5    |    4    |    3    |    2    |    1    |    0
				 1    |     1    |    1    |    0    |   CLA   |   CLL   |   CMA   |   CML   |   RAR   |   RAL   |   0/1   |   IAC

			Group 2 (8th bit is 1)
				11    |    10    |    9    |    8    |    7    |    6    |    5    |    4    |    3    |    2    |    1    |    0
				 1    |     1    |    1    |    1    |   CLA   |   SMA   |   SZA   |   SNL   |   RSS   |   OSR   |   HLT   |    0

			Instruction Translations (from MSB to LSB)
				- Group 1
					- CLA: clear the A register; set it to zero
					- CLL: clear the Link bit
					- CMA: complement the A register (bit by bit, change 1 to 0 and 0 to 1)
					- CML: complement the Link bit
					- RAR: rotate the A register right by:
						- one bit if bit 1 of the instruction is 0
						- two bits if bit 1 of the instruction is 1
					- RAL: rotate the A register left by:
						- one bit if bit 1 of the instruction is 0
						- two bits if bit 1 of the instruction is 1
					- RTR: mnemonic; rotate right by two bits (sets bit 1 in the instruction)
					- RTL: mnemonic; rotate left by two bits
					- IAC: add 1 to the A register

				- Group 2
					- CLA: same as above
					- SMA: skip on Minus A: if the A register is negative, skip the next instruction
					- SZA: skip on Zero A: if the A register is 0, skip the next instruction
					- SNL: skip on nonzero Link: if the Link bit is 1, skip the next instruction
					- RSS: reverse skip sense: if this bit is 1, the SMA, SZA, and SNL subinstructions will skip on the OPPOSITE condition
					- OSR: OR from the Switch Register: the contents of the switch register on the console are ORed into the A register
					- HLT: halt

			Instruction Priorities
				- Group 1
					1) CLA and CLL (indices 4 and 5, respectively)
					2) CMA and CML (indices 6 and 7, respectively)
					3) IAC (index 11)
					4) RAR, RAL, RTR, and RTL (indices 8, 9, 8/10, 9/10, respectively)
				- Group 2
					1) SMA, SZA and SNL (indices 5, 6, and 7, respectively) (If any of these are selected and the condition is true, set the Skip flag. If all selected conditions are false, clear the Skip flag. (If none are selected, the Skip flag is cleared.))
					2) RSS (index 8) (If RSS is selected, complement the Skip flag.)
					3) CLA (index 4)
					4) OSR (index 9)
					5) HLT (index 10)

		FOR THIS PROGRAM
			- each line in the input file consists of two fields
				- the first field is a hex representation of a memory address
				- the second field is the hex representation of the contents of that location
				- exceptions: the very first line in the input file tells the program counter where to start
					- so "EP: 067" would mean "PC = 0x67"
			- for IOT instructions
				- ignore the function code
				- if the device is 3
					- do a getchar() to read a character from standard input
					- put that character in the A register
				- if the device is 4
					- take the low-order 8 bits from the A register and output it as an ASCII character to standard output (putchar())
				- assume these IOT instructions take 1 cycle
				- ignore all other devices
			- for Group 2 (opcode 7) instructions
				- treat OSR as NOP (no op)

		NEED
			- function to check opcode
				- 8 associated functions: 6 for the regular opcodes, 1 for IOT (bit 6), 1 for microinstructions (bit 7)
			- 14 functions to support microinstruction ops
			- structure to represent 4096 12-bit words
				- original used 32 pages of 128 words each
				- 0th page is addresses 0000 to 0177, 1st is 0200 to 0377, 2nd is 0400 to 0577, etc (all octal)
				- or 0th page is addresses 0x0 to 0x7f, 1st page is addresses 0x80 to 0xFF, 2nd is 0x100 to 0x17F, etc
				- or 0th page is addresses 0 to 127, 1st page is addresses 128 to 255, 3rd is 256 to 383, etc
				- linked list approach (single)
					- each node holds its page number, memory address, contents
			- structure to represent the accumulator and link bit
				- array of 13 ints, as such

				|    0    |    1    |    2    |    3    |    4    |    5    |    6    |    7    |    8    |    9    |    10    |    11    |    12    |

			    |												ACCUMULATOR (12 BITS)													  | LINK BIT |

				|    12    |    11    |    10    |    9    |    8    |    7    |    6    |    5    |    4    |    3    |    2    |    1    |    0    |

				- or just one array of 12 ints for the accumulator, array of one int for link bit

			- structure to represent the 12-bit program counter
				- array of 12 ints
			- op times: opcodes 0 - 4 have time of 2 cycles; only opcode 5 has time of 1 cycle
			- indirect addressing adds 1 cycle to the total time
			- microinstruction ops take 1 cycle (all)


http://www4.wittenberg.edu/academics/mathcomp/bjsdir/PDP8HomePage.htm




*/