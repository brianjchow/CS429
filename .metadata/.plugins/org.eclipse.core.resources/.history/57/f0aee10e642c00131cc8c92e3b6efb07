/*
 * LinkedList.c
 *
 *  Created on: Oct 3, 2013
 *      Author: Brian
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

typedef struct Node Node;
typedef struct LinkedList LinkedList;
typedef struct iterator;

struct Node {
	char *data;
	Node *next;
};

struct LinkedList {
	Node *head, *tail;
	int size;
};

struct iterator {

};

//struct LinkedList list;

Node* newNode(char *data) {
	// note: 0 is false and 1 is true


	Node* out = malloc(sizeof(struct Node));


	if (data != NULL) {
		(*out).data = data;
		(*out).next = NULL;
	}
	return out;
}

LinkedList* newLinkedList() {

	LinkedList* out = malloc(sizeof(struct LinkedList));
	(*out).head = NULL;
	(*out).tail = NULL;
	(*out).size = 0;
	return out;
}

int add(LinkedList* list, Node* toAdd) {
	// note: 0 is false and 1 is true

	if (list == NULL || toAdd == NULL) {
		return 0;
	}
	if ((*list).size == 0) {
		(*list).head = toAdd;
		(*list).tail = toAdd;
		(*list).size++;
		return 1;
	}
	else {
//		Node* tempTail = (*list).tail;
//		(*tempTail).data = (*toAdd).data;
//		(*tempTail).next = toAdd;

		(*list).tail = toAdd;
		(*list).size++;
		return 1;
	}

	return 0;
}

int getSize(LinkedList* list) {
		return (*list).size;
}

//int add(LinkedList *list, Node *toAdd) {
//	// note: 0 is false and 1 is true
//
//	if (*toAdd == NULL) {
//		return 0;
//	}
//	if (*list == NULL) {
//		(*list).head = *toAdd;
//		(*list).tail = *toAdd;
//		(*list).head.data = (*toAdd).data;
//		(*list).tail.data = (*toAdd).data;
//		(*list).size = 1;
//		return 1;
//	}
//	else {
//		(*list).tail.next = *toAdd;
//		(*list).tail = *toAdd;
//		(*list).size++;
//		return 1;
//	}
//	return 0;
//}

int main() {

	// begin testing Node

	char string[] = {"Hello world"};
	int size = sizeof(string);
	printf("Size of string: %d\n", size);

	char *stringPtr = string;
	printf("Size of stringPtr: %zu\n", strlen(stringPtr));

	Node* test = newNode(stringPtr);
	if ((*test).data == NULL) {
		printf("Node data field is null\n");
	}
	if ((*test).next == NULL) {
		printf("Node next field is null\n");
	}
	int i;
	for (i = 0; i < size; i++) {
		printf("%c", (*test).data[i]);
	}
	printf("\n");

	// begin testing LinkedList

	printf("TESTING CREATE NEW LL---------------------------------------\n");
	LinkedList* testll = newLinkedList();
	if ((*testll).head == NULL) {
		printf("LL head field is null\n");
	}
	if ((*testll).tail == NULL) {
		printf("LL tail field is null\n");
	}
	printf("LL size field is %d\n\n", (*testll).size);

	printf("TESTING ADD TO EMPTY LL ------------------------------------\n");
	add(testll, test);
	printf("Current LL size: %d\n", (*testll).size);
	char *ptrHeadArray = (testll->head)->data;

	return 0;
}
