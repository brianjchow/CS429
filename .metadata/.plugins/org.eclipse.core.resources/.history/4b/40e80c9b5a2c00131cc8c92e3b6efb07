/*
 * facts.c
 *
 *  Created on: Oct 2, 2013
 *      Author: Brian
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

typedef struct Node Node;
typedef struct LinkedList LinkedList;
typedef struct iterator;

struct Node {
	char *data;
	Node *next;
};

struct LinkedList {
	Node *head, *tail;
	int size;
};

struct iterator {

};

struct LinkedList list;

//typedef struct {
//	char *data;
//	struct Node *next;
//} Node;
//
//Node tail;
//int size;

int checkValidity(int array[], int length) {
	// note: 0 is false and 1 is true

	int i = 0;
	int hasFirstColon = 0;		// false; colon ascii = 58
	int hasFirstEquals = 0;		// false; equals ascii = 61
	while (i < length) {
		int temp = array[i];
		if (temp == 58 && hasFirstColon == 0) {
			hasFirstColon = 1;
		}
		if (temp == 61 && hasFirstColon == 1 && hasFirstEquals == 0) {
			hasFirstEquals = 1;
		}
		if (hasFirstColon == 1 && hasFirstEquals == 1) {
			return 1;
		}
		i++;
	}
	return 0;
}

//Node newNode(char *data) {
//	// note: 0 is false and 1 is true
//
//	Node *out = NULL;
//	if (*data != NULL) {
//		(*out).data = *data;
//		(*out).next = NULL;
//	}
//	return out;
//}

//int add(LinkedList *list, Node *toAdd) {
//	// note: 0 is false and 1 is true
//
//	if (*toAdd == NULL) {
//		return 0;
//	}
//	if (*list == NULL) {
//		(*list).head = *toAdd;
//		(*list).tail = *toAdd;
//		(*list).head.data = (*toAdd).data;
//		(*list).tail.data = (*toAdd).data;
//		(*list).size = 1;
//		return 1;
//	}
//	else {
//		(*list).tail.next = *toAdd;
//		(*list).tail = *toAdd;
//		(*list).size++;
//		return 1;
//	}
//	return 0;
//}

//int add(Node toAdd) {
//	// note: 0 is false and 1 is true
//
//	Node *toAddPtr = toAdd;
//
//	if (tail == NULL) {
//		tail.data = toAdd.data;
//		tail.next = NULL;
//		return 1;
//	}
//	else {
//		tail.next = toAddPtr;				// will this work? !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		tail = toAdd;
//		return 1;
//	}
//	return 0;
//}

int main(int argc[], char **argv) {

	// initialize global vars
//	tail = NULL;
//	size = 0;

	FILE *input;
//	list = NULL;
//	LinkedList *listPtr = list;

	input = fopen("computers.fax", "rb");
	if (input == NULL) {
		perror("Invalid file specified");
		exit(-1);
	}

	// read line by line
		// read until \n is encountered, storing chars in array
		// send array to checkValidity()
		// if checkValidity() returns 1
			// send to [METHOD] for processing; use strtok to delimit
			// once delimited, send to [METHOD] for storage (store length of array in 0th index)
		// else do nothing
		// repeat until EOF is encountered
		// see http://stackoverflow.com/questions/2372813/reading-one-line-at-a-time-in-c
	// storage (linked list approach)
		// use strtok to delimit into NAME, PROPERTY, and VALUE fields
		// use top-level linked list to store NAMEs; data field of each link holds address to middle-level LL
		// use middle-level linked list to store PROPERTY; data field of each link holds address to low-level LL
		// use low-level linked list to store VALUE
		// see https://github.com/laumann/C/tree/master/linkedlist
		// see https://github.com/cmr/C-Utilities/blob/master/LinkedList.h
	// storage (mixed linked list/array approach)
		// same as linked list approach EXCEPT
		// use array instead of linked list to store VALUE
		// not much difference; uses one less pointer due to direct access to char array (string) from middle-level LL
	// storage (hashmap)
		// see http://elliottback.com/wp/hashmap-implementation-in-c/
		// see
		// collisions not possible
		// too fucking hard at this point


	return 0;
}

