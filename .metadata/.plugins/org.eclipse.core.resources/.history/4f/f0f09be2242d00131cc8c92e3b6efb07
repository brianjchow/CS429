/*
 * LinkedList.c
 *
 *  Created on: Oct 3, 2013
 *      Author: Brian
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

//typedef struct Node Node;
//typedef struct LinkedList LinkedList;

typedef struct NameNode NameNode;
typedef struct NameLinkedList NameLinkedList;
typedef struct PropNode PropNode;
typedef struct PropLinkedList PropLinkedList;
//typedef struct Iterator iterator;

//struct Node {
//	char *data;
//	Node *next;
//	LinkedList *lowerLevel;
//	int isName, isProperty, isValue;
//};
//
//struct LinkedList {
//	Node *head, *tail;
//	int size;
//};

struct NameNode {
	char *name;
	NameNode *next;
	PropLinkedList *properties;
};

struct NameLinkedList {
	NameNode *head, *tail;
	int size;
};

struct PropNode {
	char *property;
	PropNode *next;
	char *value;
};

struct PropLinkedList {
	PropNode *head, *tail;
	int size;
};

NameLinkedList names;

int add(char *name, char *property, char *value) {
	// note: 0 is false, 1 is true
	// no null checks for parameters necessary due to program design

	int alreadyExists = -2;
	NameNode temp = (*names).head;
	while ((*temp).name != NULL) {
		alreadyExists = strcmp((*temp).name, name);
		if (alreadyExists == 0) {
			// update property linked list and value 	FILL THIS IN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			return 1;
		}
		temp = (*temp).next;
	}

	// if doesn't exist, create new NameNode/PropNode and add to end of names, update size of names
	// FILL THIS IN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	return 0;
}

NameNode* newEntry(char *name, char *property, char *value) {

	return NULL;
}


//struct iterator {
//
//};

//Node* newNode(char *data) {
//	// note: 0 is false and 1 is true
//
//	Node* out = malloc(sizeof(struct Node));
//
//	if (data != NULL) {
//		(*out).data = data;
//		(*out).next = NULL;
//	}
//	return out;
//}

//LinkedList* newLinkedList() {
//
//	LinkedList* out = malloc(sizeof(struct LinkedList));
//	(*out).head = NULL;
//	(*out).tail = NULL;
//	(*out).size = 0;
//	return out;
//}

//int add(LinkedList* list, Node* toAdd) {
//	// note: 0 is false and 1 is true
//
//	if (list == NULL || toAdd == NULL) {
//		return 0;
//	}
//	if ((*list).size == 0) {
//		(*list).head = toAdd;
//		(*list).tail = toAdd;
//		(*list).size++;
//		return 1;
//	}
//	else {
////		Node* tempTail = (*list).tail;
////		(*tempTail).data = (*toAdd).data;
////		(*tempTail).next = toAdd;
//		(list->tail)->next = toAdd;
//		(*list).tail = toAdd;
//		//(list->tail)->data = (*toAdd).data;
//
//		(*list).size++;
//		return 1;
//	}
//
//	return 0;
//}

//int getSize(LinkedList* list) {
//	return (*list).size;
//}

// only checks for presence of 'F'/'Q' and a colon before equals sign
// string may not be valid even if it passes this test; parseLines will check to see whether or not each field actually has something in it
int checkValidity(char *string) {
	// note: 0 is false and 1 is true;

	int length = strlen(string);
	int i = 0;
	int hasFirstColon = 0;		// : ascii = 58
	int hasFirstEquals = 0;		// = ascii = 61

	if (string == NULL || length <= 0) {
		return 0;
	}
	if (string[0] != 'F' && string[0] != 'Q') {
		return 0;
	}
	while (i <= length) {
		int temp = string[i];
		if (temp == 58 && hasFirstColon == 0) {
			hasFirstColon = 1;
		}
		if (temp == 61 && hasFirstColon == 1 && hasFirstEquals == 0) {
			hasFirstEquals = 1;
		}
		if (hasFirstColon == 1 && hasFirstEquals == 1) {
			return 1;
		}
		i++;
	}
	return 0;
}

int sizeWOWhitespace(char *string) {
	int i, length, newSize;
	length = strlen(string);
	newSize = 0;

	for (i = 0; i <= length; i++) {
		if ((int) string[i] != 32) {
			newSize++;
		}
	}
	return newSize;
}

void removeWhitespace(char *src, char *dest) {												// THIS MEANS NO SPACES ALLOWED IN ANY FIELD (?)
	int i, length;
	length = strlen(src);
	int destCounter = 0;

	for (i = 0; i <= length; i++) {
		if ((int) src[i] != 32) {
			dest[destCounter] = src[i];
			destCounter++;
		}
	}
}

int parseLine(char *string) {
	// note: 0 is false and 1 is true

	if (!checkValidity(string)) {
		return 0;
	}
	int indexOfColon, indexOfEquals, bothFound, i;
	indexOfColon = -1;
	indexOfEquals = -1;
	bothFound = 0;
	i = 0;
	int length = strlen(string);
	while (bothFound == 0 && i <= length) {
		int temp = string[i];
		if (temp == 58 && indexOfColon == -1) {
			indexOfColon = i;
		}
		if (temp == 61 && indexOfColon != -1 && indexOfEquals == -1) {
			indexOfEquals = i;
		}
		if (indexOfColon != -1 && indexOfEquals != -1) {
			bothFound = 1;
		}
		i++;
	}

	// checks to see whether or not each field actually has something in it
	if (indexOfColon - 1 == 1 || indexOfEquals - 1 == indexOfColon || length == indexOfEquals) {
		return 0;
	}

	printf("Length: %d\n", length);
	printf("Index of first colon: %d\n", indexOfColon);
	printf("Index of first equals: %d\n\n", indexOfEquals);

	// change to strtok later
	char *name = (char*) calloc(indexOfColon, sizeof(char));
	char *property = (char*) calloc((indexOfEquals - indexOfColon), sizeof(char));
	char *value = (char*) calloc((length - indexOfEquals), sizeof(char));

	strncpy(name, string + 1, indexOfColon - 1);															// UNSURE IF NULL TERMINATING CHAR IS COPIED !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	strncpy(property, string + (indexOfColon + 1), (indexOfEquals - indexOfColon - 1));
	strncpy(value, string + (indexOfEquals + 1), (length - indexOfEquals - 1));
////	for (i = 0; i < strlen(name); i++) {
////		printf("%c", name[i]);
////	}
//	printf("\n");
//	printf("%s\n", name);
////	for (i = 0; i < strlen(property); i++) {
////		printf("%c", property[i]);
////	}
//	printf("\n");
//	printf("%s\n", property);
////	for (i = 0; i < strlen(value); i++) {
////		printf("%c", value[i]);
////	}
//	printf("\n");
//	printf("%s\n", value);

//	printf("strlen of name: %d\n", strlen(name));
//	printf("strlen of property: %d\n", strlen(property));
//	printf("strlen of value: %d\n", strlen(value));

	// name starts from index 1 to index 7 inclusive; 8 letters total including newline at end
	// property starts from index 9 to 24 inclusive; 17 letters total including newline at end
	// value starts from index 26 to 27 inclusive; 3 letters total including newline at end

	return 0;
}

void testLLNodeFunctionality() {

}

int main() {

	//testLLNodeFunctionality();

	char *string = "F CDC6600: number_registers=24";
	int size = strlen(string);
	printf("Size: %d\n", size);
	int i;
	for (i = 0; i < size; i++) {
		printf("%c", string[i]);
	}
	printf("\n");
	int valid = checkValidity(string);									// must implement check to see whether each field actually has something in it
	printf("Valid: %d\n", valid);
	int newSize = sizeWOWhitespace(string);
	char shortened[newSize];
	char *shortenedPtr = shortened;
	removeWhitespace(string, shortenedPtr);
	printf("Without whitespace: ");
	for (i = 0; i < newSize; i++) {
		printf("%c", shortenedPtr[i]);
	}
	printf("\n");
	//parseLine(shortenedPtr);



//	LinkedList* names = newLinkedList();
//	LinkedList* properties = newLinkedList();
//	LinkedList* values = newLinkedList();
//	parseLine(shortenedPtr, names, properties, values);
	return 0;
}

	// read line by line
		// read until \n is encountered, storing chars in array
		// send array to checkValidity()
		// if checkValidity() returns 1
			// send to [METHOD] for processing; use strtok to delimit
			// once delimited, send to [METHOD] for storage (store length of array in 0th index)
		// else do nothing
		// repeat until EOF is encountered
		// see http://stackoverflow.com/questions/2372813/reading-one-line-at-a-time-in-c
	// storage (linked list approach)
		// use strtok to delimit into NAME, PROPERTY, and VALUE fields
		// use top-level linked list to store NAMEs; data field of each link holds address to middle-level LL
		// use middle-level linked list to store PROPERTY; data field of each link holds address to low-level LL
		// use low-level linked list to store VALUE
		// see https://github.com/laumann/C/tree/master/linkedlist
		// see https://github.com/cmr/C-Utilities/blob/master/LinkedList.h
	// storage (mixed linked list/array approach)
		// same as linked list approach EXCEPT
		// use array instead of linked list to store VALUE
		// not much difference; uses one less pointer due to direct access to char array (string) from middle-level LL
	// storage (hashmap)
		// see http://elliottback.com/wp/hashmap-implementation-in-c/
		// see
		// collisions not possible
		// too fucking hard at this point
